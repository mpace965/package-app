import { createReadStream } from "fs";
import csv from "csv-parser";
import { NotFoundError } from "../NotFoundError";
import { DataProviderInternalError } from "../DataProviderInternalError";

interface Line {
  id: string;
  packageName: string;
  packageVersion: string;
  description: string;
  timestamp: string;
}

export interface Vulnerability {
  id: string;
  packageName: string;
  packageVersion: string;
  description: string;
  timestamp: Date;
}

export class VulnerabilityCSVDataProvider {
  private packageCache: Record<string, Array<Vulnerability>> = {};
  private cached: boolean = false;

  public async read(packageName: string): Promise<Array<Vulnerability>> {
    await this.loadIfNotCached();

    const vulnerability = this.packageCache[packageName];

    if (vulnerability) {
      return vulnerability;
    }

    throw new NotFoundError();
  }

  private async loadIfNotCached(): Promise<void> {
    if (!this.cached) {
      await this.loadData();
      this.cached = true;
    }
  }

  private async loadData(): Promise<void> {
    try {
      await new Promise<void>((resolve, reject) => {
        createReadStream("./data/vulnerabilities.csv")
          .pipe(
            csv([
              "id",
              "packageName",
              "packageVersion",
              "description",
              "timestamp",
            ])
          )
          .on(
            "data",
            ({
              id,
              packageName,
              packageVersion,
              description,
              timestamp,
            }: Line) => {
              if (!this.packageCache[packageName])
                this.packageCache[packageName] = [];

              this.packageCache[packageName].push({
                id,
                packageName,
                packageVersion,
                description,
                timestamp: new Date(parseInt(timestamp) * 1000),
              });
            }
          )
          .on("end", resolve)
          .on("error", reject);
      });
    } catch (e) {
      console.error(e);
      throw new DataProviderInternalError();
    }
  }
}
